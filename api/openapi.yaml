openapi: 3.0.0
info:
  title: PowerViews API
  description: Documentation for powerviews api server (not engine server)
  version: 0.1.1
servers:
  - url: http://powerviews-api.linkaform.com:8080/v1
    description: "Prerelease testing"
  - url: https://powerviews-api.linkaform.com/v1
    description: "Main (production) server"
  - url: http://localhost:8080/v1
    description: "Local testing"
security:
- ApiKeyAuth: []
tags:
- name: accounts
  description: Powerviews internal accounts (not PostgreSQL users)
- name: pgusers
  description: "Powerviews PostgreSQL users, a given /users/id can have several /pgusers/\
    \ referring to it, this allows to have several credentials for the same powerviews\
    \ user"
- name: queries
  description: Queries to load for a given account
paths:
  /accounts:
    post:
      tags:
      - accounts
      summary: Creates account
      operationId: accountsPOST
      requestBody:
        $ref: '#/components/requestBodies/Account'
      responses:
        "201":
          $ref: '#/components/responses/AccountOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Accounts
  /accounts/{id}:
    get:
      tags:
      - accounts
      summary: Retrieve a given account
      operationId: accountsIdGET
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/AccountOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Accounts
    put:
      tags:
      - accounts
      summary: Update a given user
      operationId: accountsIdPUT
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Account'
      responses:
        "204":
          $ref: '#/components/responses/AccountOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Accounts
    delete:
      tags:
      - accounts
      summary: Delete a given user
      operationId: accountsIdDELETE
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: "Deleted, no content"
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Accounts
  /pgusers/:
    post:
      tags:
      - pgusers
      summary: "Create PostgreSQL user with given credentials, this pguser can see an isolated set of queries"
      operationId: pgusersPOST
      requestBody:
        $ref: '#/components/requestBodies/Pguser'
      responses:
        "201":
          $ref: '#/components/responses/PguserOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Pgusers
  /pgusers/{id}:
    get:
      tags:
      - pgusers
      summary: Get a given pguser
      operationId: pgusersIdGET
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/PguserOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Pgusers
    put:
      tags:
      - pgusers
      summary: Update a given pguser
      operationId: pgusersIdPUT
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Pguser'
      responses:
        "204":
          $ref: '#/components/responses/PguserOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Pgusers
    delete:
      tags:
      - pgusers
      summary: Delete a given pguser, also deletes all queries and views for the user
      operationId: pgusersIdDELETE
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          $ref: '#/components/responses/PguserOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Pgusers
  /pgusers/by/account_id/{id}:
    get:
      tags:
      - pgusers
      summary: receives as argument a account_id, returns an array containing the list of pgusers matching that account_id
      operationId: pgusersAccount_idIdGET
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/ArrayOfPguserOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Pgusers
  /queries/:
    post:
      tags:
      - queries
      summary: Create query
      operationId: queriesPOST
      requestBody:
        $ref: '#/components/requestBodies/Query'
      responses:
        "201":
          $ref: '#/components/responses/QueryOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Queries
  /queries/{id}:
    get:
      tags:
      - queries
      summary: Get a given Query
      operationId: queriesIdGET
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/QueryOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Queries
    put:
      tags:
      - queries
      summary: Update a given query
      operationId: queriesIdPUT
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Query'
      responses:
        "204":
          $ref: '#/components/responses/QueryOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Queries
    delete:
      tags:
      - queries
      summary: Delete a given Query
      operationId: queriesIdDELETE
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          $ref: '#/components/responses/QueryOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Queries
  /queries/{id}/refresh:
    put:
      tags:
      - queries
      summary: "Refresh query as soon as possible: put query in queue to be processed at the next loop of the engine"
      operationId: queriesIdRefreshPUT
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          $ref: '#/components/responses/QueryOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Queries
  /queries/by/script_id/{id}:
    get:
      tags:
      - queries
      summary: receives as argument a script_id, returns an array containing the list of queries matching that script_id
      operationId: queriesScript_idIdGET
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/ArrayOfQueryOK'
        default:
          $ref: '#/components/responses/Error'
      x-swagger-router-controller: Queries
components:
  schemas:
    Error:
      required:
      - error_code
      type: object
      properties:
        error_code:
          type: string
          description: "error code in uppercase, stable unique string\n* `EEXISTS`:\
            \ value already exists\n* `EINVAL`: invalid value\n* ...\n"
          enum:
          - EEXISTS
          - EINVAL
          - '...'
        error_message:
          type: string
          description: "Human readable error description, DO NOT depend on this value\
            \ being stable"
          example: value already exists
    Account:
      required:
      - id
      - name
      - email
      - apikey
      type: object
      properties:
        id:
          type: integer
          description: "Powerviews internal id, will be used for most requests"
          format: int64
            #          readOnly: true
          example: 100
        name:
          type: string
          description: "Unique name used to refer to this user, will be used as basis\
            \ for automatic table and view naming. Ex. 1259 maps infosync_answers_client_1259\
            \ in mongo side and pv_1259_table in postgresql side.\n"
          example: "1259"
        email:
          type: string
          description: unique email in account domain used to identify account
          # XXX due to linkaform changes email is no longer an email, just regular
          #     string
          # format: email
          example: juan.perez@example.com
        desc:
          type: string
          description: account description
          example: Juan perez
          default: ""
        apikey:
          type: string
          description: api key to start connections to lkf backend for this account
          example: jwt xxxyyyzzz...
      description: synonymous of linkaform customer account
      example:
        apikey: jwt xxxyyyzzz...
        name: "1259"
        id: 100
        email: juan.perez@example.com
        desc: Juan perez
    Pguser:
      required:
      - id
      - name
      - pass
      - account_id
      type: object
      properties:
        id:
          type: integer
          description: "Powerviews internal id, references this unique Powerviews\
            \ PostgreSQL user (not related to internal postgresql oid)"
          readOnly: true
          example: 200
        account_id:
          type: integer
          description: "Powerviews account id, the customer id, see account schema"
          example: 100
        name:
          maxLength: 64
          pattern: ^pv_[a-zA-Z0-9]+$
          type: string
          description: "user name that endusers will use to connect to PostgreSQL,\
            \ must start with prefix pv_ and must be unique across the PostgreSQL\
            \ cluster"
          example: pv_1259
        pass:
          type: string
          description: password for PostgreSQL connection, could be password plaintext or the md5 hash of the password (requires 'md5' prefix)
          pattern: ^(md5)?.+$
          format: password
          writeOnly: true
        desc:
          type: string
          description: description
          default: ""
        connstr:
          type: string
          description: connection string (url)
          readOnly: true
      example:
        account_id: 100
        pass: ""
        name: pv_1259
        desc: desc
    ArrayOfPguser:
      type: array
      items:
        $ref: '#/components/schemas/Pguser'
    Query:
      required:
      - id
      - script_id
      - pguser_id
      type: object
      properties:
        id:
          type: integer
          description: internal (powerviews) id of the query (not related to LKF api
            id)
          readOnly: true
          example: 300
        pguser_id:
          type: integer
          description: "powerviews postgresql user id, see pguser schema"
          example: 1
        created:
          type: integer
          description: timestamp in seconds since unix epoch
          readOnly: true
        state:
          type: string
          readOnly: true
          description: >
            state of engine fetcher for this query, can be one of:

            * __unprocessed__: record not yet processed by the engine in any form

            * __inqueue__: engine determined it must work with this record, it is in queue but not yet processing

            * __working__: engine has reached the point in the work queue where it is currently processing this record (short lived state)

            * __error__: engine found an error during the processing of this record, see *last_error* field for more info. Engine will try again this record after *retry* seconds. *last_try* shows the timestamp of the last error.

            * __success__: engine successfully processed this record, no error was found. Engine will refresh this record after *refresh* seconds. *last_refresh* and *last_try* should match, *last_error* should be null.

          enum:
          - unprocessed
          - inqueue
          - working
          - error
          - success
        table:
          maxLength: 64
          type: string
          description: "autogenerated name of postgresql table where verbatim data\
            \ fetched from mongodb will be stored, this tables are not exposed to\
            \ Pgusers"
          readOnly: true
          pattern: ^[a-zA-Z][a-zA-Z0-9_]+$
        view:
          maxLength: 64
          type: string
          description: "user-facing name of view that will be shown to client connections\
            \ and/or Power BI, you can specify a pretty name here if desired, otherwise,\
            \ a default automatically generated value is used"
          pattern: ^[a-zA-Z][a-zA-Z0-9_]+$
        refresh:
          minimum: 60
          type: integer
          description: how often *in seconds* to refresh data from mongodb
          default: 300
        retry:
          minimum: 1
          type: integer
          description: how often *in seconds* to retry data refresh *only* if previous refresh failed with error
          default: 30
        last_refresh:
          type: integer
          description: when last the last successful refresh of this query. timestamp in integer seconds since unix epoch
          readOnly: true
          example: 1609480800
        last_try:
          type: integer
          description: when last the last try to refresh of this query, if there is no error this equals last_refresh, otherwise will be greather than last_refresh. timestamp in integer seconds since unix epoch
          readOnly: true
          example: 1609480800
        script_id:
          type: integer
          description: id of script in lkf api backend
          example: 67428
        last_query:
          type: object
          description: last query data structure fetch from lkf api
          readOnly: true
        last_error:
          type: string
          description: last error string from last try that failed, will be null if last refresh was successful
          readOnly: true
      example:
        view: autogenerated
        pguser_id: 1
        script_id: 67428
    ArrayOfQuery:
      type: array
      items:
        $ref: '#/components/schemas/Query'
  responses:
    Error:
      description: Unknown error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AccountOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    PguserOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pguser'
    ArrayOfPguserOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfPguser'
    QueryOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Query'
    ArrayOfQueryOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfQuery'
  requestBodies:
    Account:
      description: body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
      required: true
    Pguser:
      description: posgresql user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pguser'
      required: true
    Query:
      description: Query to run against mongodb and show to final user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Query'
      required: true
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header
